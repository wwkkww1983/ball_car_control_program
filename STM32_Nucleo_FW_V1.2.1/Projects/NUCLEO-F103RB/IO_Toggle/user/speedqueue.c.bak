/**
  ****************************************************************************** 
  * @作者    叶以亮  
  * @版本    V1.0.0
  * @日期    8-9-2017
  * @概要    a Queue that make through static array,the array size can change by define again 
  *            this is a circular Queue!!
  ******************************************************************************
  * @注意事项
  ******************************************************************************  
  */ 

#include "speedangle.h"
#include <stdio.h>
#include <stdlib.h>
//#include <assert.h>
#include "stm32f10x_conf.h"
#include <string.h>
/*eive Queue*/
#define QUEUE_SIZE 20
#define ARRAY_SIZE (QUEUE_SIZE + 1)
/*-------------*/
   
/*
 * the array that stores elements && the pointer that point to the head as well as the tail of the array 
 */
 /* Queue */
  static  QUEUE_TYPE Queue[ARRAY_SIZE];
  static  size_t front =1;
  static  size_t rear =0;
 /*---------------*/
  
 /**
  * @brief  insert 
  *         
  * @param  value the element what is needed to be added
  * @retval None
  * @note the function is only suitably for the Queue that creat dynamically
  */
  
  void speedangle_insert(QUEUE_TYPE value)
  {
  	//assert( !is_full());
		assert_param(!is_full());
  	rear = (rear +1)%ARRAY_SIZE;
    Queue[ rear ].angle = value.angle;
		///strcpy(Queue[ rear ].str,value.str);
		Queue[ rear ].speedangle = value.speedangle;
  }
  
  /**
  * @brief  delete delete an element from the Queue and brush off it 
  *         
  * @param  None 
  * @retval None
  * @note 
  */
  
  void speedangle_delete(void)
  {
      //assert(!is_empty());
		  assert_param(!is_empty());
      front = (front +1)%ARRAY_SIZE;
  }
  
  /**
  * @brief  first return the first element of the Queue 
  *         
  * @param  None 
  * @retval the first QUEUE_TYPE element of Queue 
  * @note 
  */
  
  QUEUE_TYPE speedangle_first (void)
  {
      //assert(!is_empty());
		  assert_param(!is_empty());
      return Queue[front];
  }
  
  /**
  * @brief  is_empty return true if Queue empty,otherwise false 
  *         
  * @param  None 
  * @retval None 
  * @note 
  */
  
  int speedangle_is_empty(void)
  {
       return ((rear +1)%ARRAY_SIZE) == front;
  }
  /**
  * @brief  if_full return true if the Queue full,otherwise false 
  *         
  * @param  None 
  * @retval None 
  * @note 
  */
  
  int speedangle_is_full(void)
  {
  	return (rear +2)%ARRAY_SIZE == front;
  }